{
  "version": "1.0",
  "created": "2025-10-02",
  "compat": {
    "shell": "powershell",
    "os": "windows",
    "editors": ["vscode"],
    "cli": ["claude-code-cli", "cline"]
  },
  "conventions": {
    "language": "TypeScript",
    "frameworks": ["Next.js 15", "Tailwind", "shadcn/ui"],
    "repo_layout": "src/**, app router"
  },
  "name": "Full Build Pipeline (Runner)",
  "id": "runner_full_build",
  "category": "workflow",
  "summary": "Runs the full pipeline: Site scaffold â†’ Nav map (+routes) â†’ UI-shadcn components â†’ SEMRUSH mock dataset â†’ build & smoke-check.",
  "system_prompt": "ðŸª„ I coordinate a deterministic end-to-end setup for the GEO-SEO app. I scaffold the site, wire navigation, ensure shadcn/UI components, generate a mock SEMRUSH dataset, then build and perform a quick smoke-check. Task ends when the project builds and pages resolve.",
  "goals": [
    "Create/verify Next.js project with Tailwind",
    "Write nav.ts, optional placeholder routes",
    "Create Sidebar & StatCard components",
    "Generate SEMRUSH mock dataset under /data/seo/${domain}",
    "Build project and return success summary"
  ],
  "stop_conditions": {
    "max_iterations": 3,
    "success_checks": [
      "Project folder exists at ${workspacePath}\\${projectName}",
      "src/ui/nav.ts exists",
      "src/components/Sidebar.tsx and src/components/cards/StatCard.tsx exist",
      "data/seo/${domain}/dataset.json exists and parses as JSON",
      "`npm run build` exits 0"
    ]
  },
  "inputs_schema": {
    "type": "object",
    "properties": {
      "workspacePath": { "type": "string" },
      "projectName": { "type": "string", "default": "GeoSeoApp" },
      "domain": { "type": "string", "default": "disasterrecoveryqld.au" },
      "scaffoldRoutes": { "type": "boolean", "default": true }
    },
    "required": ["workspacePath"]
  },
  "outputs_schema": {
    "type": "object",
    "properties": {
      "projectPath": { "type": "string" },
      "summary": { "type": "string" }
    },
    "required": ["projectPath", "summary"]
  },
  "tools": {
    "commands": [
      {
        "name": "create_next",
        "description": "Create a new Next.js (TypeScript, App Router) project",
        "cmd": "pwsh -NoProfile -Command \"Set-Location '${workspacePath}'; npm create next-app@latest ${projectName} -- --ts --use-npm --app --eslint\""
      },
      {
        "name": "install_ui_deps",
        "description": "Install Tailwind and common UI dependencies",
        "cmd": "pwsh -NoProfile -Command \"Set-Location '${workspacePath}\\${projectName}'; npm i -D tailwindcss postcss autoprefixer; npm i class-variance-authority clsx tailwind-merge @radix-ui/react-icons; npx tailwindcss init -p\""
      },
      {
        "name": "configure_tailwind_content",
        "description": "Set Tailwind content paths to scan src/**",
        "cmd": "pwsh -NoProfile -Command \"$f='${workspacePath}\\${projectName}\\tailwind.config.js'; (Get-Content $f -Raw) -replace 'content:\\s*\\[.*?\\]', 'content: [\\'./src/**/*.{ts,tsx}\\']' | Set-Content $f -Encoding UTF8\""
      },
      {
        "name": "ensure_globals_css",
        "description": "Create or patch globals.css with Tailwind directives",
        "cmd": "pwsh -NoProfile -Command \"$css='${workspacePath}\\${projectName}\\src\\app\\globals.css'; if (-not (Test-Path $css)) { New-Item -Force -ItemType File $css | Out-Null }; $content = Get-Content $css -Raw; if ($content -notmatch '@tailwind base') { Add-Content -Path $css -Value '@tailwind base;'; Add-Content -Path $css -Value '@tailwind components;'; Add-Content -Path $css -Value '@tailwind utilities;' }\""
      },
      {
        "name": "write_layout_and_page",
        "description": "Create baseline layout and dashboard page",
        "cmd": "pwsh -NoProfile -Command \"$app='${workspacePath}\\${projectName}\\src\\app'; New-Item -Force -ItemType Directory $app | Out-Null; $layout = @'export default function RootLayout({ children }:{ children: React.ReactNode }) { return (<html lang=\\'en\\'><body className=\\'min-h-screen bg-background text-foreground\\'>{children}</body></html>); }'@; Set-Content -Encoding UTF8 -Path ($app+'\\layout.tsx') -Value $layout; $page = @'export default function Page(){ return (<div className=\\'p-8\\'><h1 className=\\'text-2xl font-bold\\'>Hello GEO-SEO</h1><p className=\\'text-sm text-muted-foreground\\'>Baseline dashboard is live.</p></div>); }'@; Set-Content -Encoding UTF8 -Path ($app+'\\page.tsx') -Value $page\""
      },
      {
        "name": "write_navmap",
        "description": "Create navigation map structure with typed nav items",
        "cmd": "pwsh -NoProfile -Command \"$p='${workspacePath}\\${projectName}\\src\\ui\\nav.ts'; New-Item -Force -ItemType Directory (Split-Path $p) | Out-Null; $code = @('export type NavItem = {','  key: string;','  label: string;','  href: string;','  icon?: string;','  section: \"workspace\" | \"pipeline\" | \"seo\" | \"resources\" | \"support\";','  guard?: \"auth\" | \"admin\" | \"none\";','  children?: NavItem[];', '};','export type NavMap = { items: NavItem[] };','', 'export function buildNavMap(): NavMap {','  return {','    items: [', '      { key: \"dashboard\", label: \"Dashboard\", href: \"/\", section: \"workspace\", guard: \"auth\" },', '      { key: \"seo\", label: \"SEO Tools\", href: \"/seo\", section: \"seo\", children: [', '        { key: \"overview\", label: \"Overview\", href: \"/seo/overview\", section: \"seo\" },', '        { key: \"companies\", label: \"Companies\", href: \"/seo/companies\", section: \"seo\" },', '        { key: \"keywords\", label: \"Keywords\", href: \"/seo/keywords\", section: \"seo\" },', '        { key: \"rankings\", label: \"Rankings\", href: \"/seo/rankings\", section: \"seo\" },', '        { key: \"reports\", label: \"Reports\", href: \"/seo/reports\", section: \"seo\" }', '      ]},', '      { key: \"pipeline\", label: \"Pipeline\", href: \"/pipeline\", section: \"pipeline\", children: [', '        { key: \"contacts\", label: \"Contacts\", href: \"/pipeline/contacts\", section: \"pipeline\" },', '        { key: \"deals\", label: \"Deals\", href: \"/pipeline/deals\", section: \"pipeline\" },', '        { key: \"tasks\", label: \"Tasks\", href: \"/pipeline/tasks\", section: \"pipeline\" }', '      ]},', '      { key: \"resources\", label: \"Resources\", href: \"/resources\", section: \"resources\" },', '      { key: \"support\", label: \"Support\", href: \"/support\", section: \"support\" }', '    ]', '  };', '}', '') -join \"`n\"; Set-Content -Encoding UTF8 -Path $p -Value $code\""
      },
      {
        "name": "scaffold_routes",
        "description": "Create placeholder pages for all navigation routes",
        "cmd": "pwsh -NoProfile -Command \"if (${scaffoldRoutes}) { $app='${workspacePath}\\${projectName}\\src\\app'; $routes = @('/', '/seo', '/seo/overview', '/seo/companies', '/seo/keywords', '/seo/rankings', '/seo/reports', '/pipeline', '/pipeline/contacts', '/pipeline/deals', '/pipeline/tasks', '/resources', '/support'); foreach($r in $routes){ $dir = $r -replace '^/',''; if ($dir -eq ''){ $rdir = Join-Path $app ''; } else { $rdir = Join-Path $app $dir; } New-Item -Force -ItemType Directory $rdir | Out-Null; $page = Join-Path $rdir 'page.tsx'; if (-not (Test-Path $page)) { $label = $r; if ($label -eq '') { $label = '/'; } $code = \"export default function Page(){ return (<div className='p-8'>${label}</div>); }\"; Set-Content -Encoding UTF8 -Path $page -Value $code } } }\""
      },
      {
        "name": "write_sidebar",
        "description": "Create Sidebar component with navigation links",
        "cmd": "pwsh -NoProfile -Command \"$p='${workspacePath}\\${projectName}\\src\\components\\Sidebar.tsx'; New-Item -Force -ItemType Directory (Split-Path $p) | Out-Null; $code = @('import Link from \"next/link\";','import { usePathname } from \"next/navigation\";','', 'export function Sidebar({ nav }:{ nav:{items:Array<{key:string;label:string;href:string;icon?:string;children?:any[]}>}}){','  const pathname = usePathname();','  return (','    <aside className=\"w-72 h-screen border-r border-border bg-card flex flex-col\">','      <div className=\"p-4 font-semibold\">GEO-SEO</div>','      <nav className=\"flex-1 overflow-y-auto\">','        {nav.items.map(item => (','          <div key={item.key} className=\"px-2 py-1\">','            <Link href={item.href} className={`block px-3 py-2 rounded-lg ${pathname===item.href ? ''bg-primary text-primary-foreground'' : ''hover:bg-muted''}`}>','              {item.label}','            </Link>','            {item.children?.length ? (','              <div className=\"ml-2 mt-1 space-y-1\">','                {item.children.map((c:any)=> (','                  <Link key={c.key} href={c.href} className={`block px-3 py-1 rounded-md text-sm ${pathname===c.href ? ''bg-muted'' : ''hover:bg-muted''}`}>','                    {c.label}','                  </Link>','                ))}','              </div>','            ) : null}','          </div>','        ))}','      </nav>','    </aside>','  );','}','') -join \"`n\"; Set-Content -Encoding UTF8 -Path $p -Value $code\""
      },
      {
        "name": "write_statcard",
        "description": "Create StatCard component for dashboard metrics",
        "cmd": "pwsh -NoProfile -Command \"$p='${workspacePath}\\${projectName}\\src\\components\\cards\\StatCard.tsx'; New-Item -Force -ItemType Directory (Split-Path $p) | Out-Null; $code = @('import * as React from \"react\";','export function StatCard({title, value}:{title:string; value:string|number}){','  return (','    <div className=\"rounded-2xl border p-4\">','      <div className=\"text-sm text-muted-foreground\">{title}</div>','      <div className=\"text-2xl font-bold\">{value}</div>','    </div>',');','}','') -join \"`n\"; Set-Content -Encoding UTF8 -Path $p -Value $code\""
      },
      {
        "name": "generate_mock_dataset",
        "description": "Generate mock SEMrush dataset for the specified domain",
        "cmd": "pwsh -NoProfile -Command \"$out='${workspacePath}\\${projectName}\\data\\seo\\${domain}'; New-Item -Force -ItemType Directory $out | Out-Null; $data = [ordered]@{ domain='${domain}'; fetchedAt=(Get-Date).ToString('o'); keywords=@( [ordered]@{ term='water damage restoration brisbane'; volume=1900; position=3; change=1 }, [ordered]@{ term='mould remediation gold coast'; volume=720; position=5; change=-1 } ); rankings=@( [ordered]@{ url='https://${domain}/services/water-damage'; position=4; term='water damage restoration brisbane' }, [ordered]@{ url='https://${domain}/services/mould-remediation'; position=7; term='mould remediation gold coast' } ); competitors=@('competitor-a.com','competitor-b.com') }; $json = $data | ConvertTo-Json -Depth 8; Set-Content -Path ($out+'\\dataset.json') -Value $json -Encoding UTF8\""
      },
      {
        "name": "build",
        "description": "Run production build to verify everything compiles",
        "cmd": "pwsh -NoProfile -Command \"Set-Location '${workspacePath}\\${projectName}'; npm run build\""
      }
    ]
  },
  "workflow": [
    {
      "step": 1,
      "name": "Project Initialization",
      "tasks": [
        "Create Next.js project with TypeScript and App Router",
        "Install Tailwind CSS and UI dependencies",
        "Configure Tailwind content paths",
        "Set up global CSS with Tailwind directives"
      ]
    },
    {
      "step": 2,
      "name": "Layout & Pages",
      "tasks": [
        "Create baseline layout with minimal structure",
        "Create placeholder dashboard page",
        "Set up proper TypeScript types"
      ]
    },
    {
      "step": 3,
      "name": "Navigation System",
      "tasks": [
        "Create navigation map (nav.ts) with typed structure",
        "Generate placeholder routes if scaffoldRoutes=true",
        "Set up SEO tools, Pipeline, Resources, Support sections"
      ]
    },
    {
      "step": 4,
      "name": "UI Components",
      "tasks": [
        "Create Sidebar component with active state",
        "Create StatCard component for metrics",
        "Wire up navigation with proper routing"
      ]
    },
    {
      "step": 5,
      "name": "Mock Data & Build",
      "tasks": [
        "Generate mock SEMrush dataset for domain",
        "Include keywords, rankings, competitors",
        "Run production build to validate",
        "Return success summary"
      ]
    }
  ],
  "plan": [
    "Run create_next",
    "Run install_ui_deps",
    "Run configure_tailwind_content",
    "Run ensure_globals_css",
    "Run write_layout_and_page",
    "Run write_navmap",
    "If scaffoldRoutes == true â†’ run scaffold_routes",
    "Run write_sidebar",
    "Run write_statcard",
    "Run generate_mock_dataset",
    "Run build",
    "Return projectPath and summary"
  ],
  "mock_dataset_structure": {
    "domain": "disasterrecoveryqld.au",
    "fetchedAt": "ISO timestamp",
    "keywords": [
      {
        "term": "water damage restoration brisbane",
        "volume": 1900,
        "position": 3,
        "change": 1
      }
    ],
    "rankings": [
      {
        "url": "https://domain/services/water-damage",
        "position": 4,
        "term": "water damage restoration brisbane"
      }
    ],
    "competitors": ["competitor-a.com", "competitor-b.com"]
  },
  "best_practices": [
    "Run full pipeline in deterministic order",
    "Verify each step before proceeding to next",
    "Use mock data for initial setup (no API calls needed)",
    "Ensure build succeeds before considering task complete",
    "Create placeholder routes for easy navigation testing",
    "Use proper TypeScript types throughout",
    "Follow Next.js 15 App Router conventions",
    "Keep components simple and reusable"
  ],
  "use_cases": [
    "Quick project setup for new GEO-SEO instances",
    "Creating demo environments with mock data",
    "Setting up baseline structure for customization",
    "End-to-end pipeline testing",
    "Onboarding new developers with working template"
  ]
}
