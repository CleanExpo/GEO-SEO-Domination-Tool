{
  "version": "1.0",
  "created": "2025-10-02",
  "compat": {
    "shell": "powershell",
    "os": "windows",
    "editors": ["vscode"],
    "cli": ["claude-code-cli", "cline"]
  },
  "conventions": {
    "language": "TypeScript",
    "frameworks": ["Next.js 15", "Tailwind", "shadcn/ui"],
    "repo_layout": "src/**, app router"
  },
  "name": "Site Builder Bootstrap",
  "id": "site_builder_bootstrap",
  "category": "scaffold",
  "summary": "Bootstraps a Next.js app with Tailwind, creates baseline layout and dashboard page, and prepares for shadcn/ui.",
  "system_prompt": "üèóÔ∏è I scaffold a Next.js app with Tailwind, add an app shell and placeholder pages, ensure basic build passes, and prepare the workspace for shadcn/ui integration. Task ends when the project compiles and renders a baseline dashboard.",
  "goals": [
    "Create/verify Next.js project",
    "Install Tailwind + required UI deps",
    "Create baseline layout and dashboard page",
    "Ensure Tailwind content paths are correct and globals include Tailwind directives"
  ],
  "stop_conditions": {
    "max_iterations": 3,
    "success_checks": [
      "Project folder exists at ${workspacePath}\\${projectName}",
      "Tailwind configured with content = ['./src/**/*.{ts,tsx}']",
      "src/app/layout.tsx and src/app/page.tsx exist",
      "`npm run build` completes successfully"
    ]
  },
  "inputs_schema": {
    "type": "object",
    "properties": {
      "workspacePath": { "type": "string" },
      "projectName": { "type": "string", "default": "GeoSeoApp" }
    },
    "required": ["workspacePath"]
  },
  "outputs_schema": {
    "type": "object",
    "properties": {
      "projectPath": { "type": "string" },
      "notes": { "type": "string" }
    },
    "required": ["projectPath"]
  },
  "tools": {
    "commands": [
      {
        "name": "create_next",
        "description": "Create a new Next.js (TypeScript, App Router) project",
        "cmd": "pwsh -NoProfile -Command \"Set-Location '${workspacePath}'; npm create next-app@latest ${projectName} -- --ts --use-npm --app --eslint\""
      },
      {
        "name": "install_ui_deps",
        "description": "Install Tailwind and common UI dependencies",
        "cmd": "pwsh -NoProfile -Command \"Set-Location '${workspacePath}\\${projectName}'; npm i -D tailwindcss postcss autoprefixer; npm i class-variance-authority clsx tailwind-merge @radix-ui/react-icons; npx tailwindcss init -p\""
      },
      {
        "name": "configure_tailwind_content",
        "description": "Set Tailwind content paths to scan src/**",
        "cmd": "pwsh -NoProfile -Command \"$f='${workspacePath}\\${projectName}\\tailwind.config.js'; (Get-Content $f -Raw) -replace 'content:\\s*\\[.*?\\]', 'content: [\\'./src/**/*.{ts,tsx}\\']' | Set-Content $f -Encoding UTF8\""
      },
      {
        "name": "ensure_globals_css",
        "description": "Create or patch globals.css with Tailwind directives",
        "cmd": "pwsh -NoProfile -Command \"$css='${workspacePath}\\${projectName}\\src\\app\\globals.css'; if (-not (Test-Path $css)) { New-Item -Force -ItemType File $css | Out-Null }; $content = Get-Content $css -Raw; if ($content -notmatch '@tailwind base') { Add-Content -Path $css -Value '@tailwind base;'; Add-Content -Path $css -Value '@tailwind components;'; Add-Content -Path $css -Value '@tailwind utilities;' }\""
      },
      {
        "name": "write_layout_and_page",
        "description": "Create baseline layout and dashboard page",
        "cmd": "pwsh -NoProfile -Command \"$app='${workspacePath}\\${projectName}\\src\\app'; New-Item -Force -ItemType Directory $app | Out-Null; $layout = @'export default function RootLayout({ children }:{ children: React.ReactNode }) { return (<html lang=\\'en\\'><body className=\\'min-h-screen bg-background text-foreground\\'>{children}</body></html>); }'@; Set-Content -Encoding UTF8 -Path ($app+'\\layout.tsx') -Value $layout; $page = @'export default function Page(){ return (<div className=\\'p-8\\'><h1 className=\\'text-2xl font-bold\\'>Hello GEO-SEO</h1><p className=\\'text-sm text-muted-foreground\\'>Baseline dashboard is live.</p></div>); }'@; Set-Content -Encoding UTF8 -Path ($app+'\\page.tsx') -Value $page\""
      },
      {
        "name": "build_project",
        "description": "Run a production build to verify everything compiles",
        "cmd": "pwsh -NoProfile -Command \"Set-Location '${workspacePath}\\${projectName}'; npm run build\""
      }
    ]
  },
  "workflow": [
    {
      "step": 1,
      "name": "Project Creation",
      "tasks": [
        "Run create_next command to scaffold new Next.js project",
        "Verify project directory created successfully",
        "Check package.json exists with correct dependencies"
      ]
    },
    {
      "step": 2,
      "name": "Tailwind Setup",
      "tasks": [
        "Install Tailwind CSS and PostCSS",
        "Install utility libraries (clsx, tailwind-merge, CVA)",
        "Install Radix UI icons",
        "Initialize Tailwind config"
      ]
    },
    {
      "step": 3,
      "name": "Configuration",
      "tasks": [
        "Configure Tailwind content paths to scan src/**",
        "Ensure globals.css has Tailwind directives",
        "Verify PostCSS config exists"
      ]
    },
    {
      "step": 4,
      "name": "App Shell",
      "tasks": [
        "Create baseline layout.tsx with minimal structure",
        "Create placeholder page.tsx dashboard",
        "Import globals.css in layout"
      ]
    },
    {
      "step": 5,
      "name": "Build Validation",
      "tasks": [
        "Run npm run build to verify compilation",
        "Check for TypeScript errors",
        "Verify Tailwind classes compile correctly",
        "Return project path and completion notes"
      ]
    }
  ],
  "plan": [
    "Run create_next",
    "Run install_ui_deps",
    "Run configure_tailwind_content",
    "Run ensure_globals_css",
    "Run write_layout_and_page",
    "Run build_project",
    "Return projectPath and notes"
  ],
  "best_practices": [
    "Always use TypeScript strict mode",
    "Use Next.js App Router (not Pages Router)",
    "Configure Tailwind content paths correctly to avoid missing classes",
    "Include all Tailwind directives in globals.css (@tailwind base, components, utilities)",
    "Install utility libraries (clsx, tailwind-merge) for conditional class handling",
    "Verify build succeeds before considering task complete",
    "Use minimal starter layout/page - shadcn/ui components added later",
    "Keep layout simple with just HTML structure and body styling"
  ],
  "troubleshooting": {
    "project_already_exists": {
      "action": "Skip creation, proceed with configuration",
      "message": "Project already exists, updating configuration"
    },
    "tailwind_not_working": {
      "action": "Check content paths and globals.css directives",
      "message": "Ensure content: ['./src/**/*.{ts,tsx}'] and @tailwind directives present"
    },
    "build_fails": {
      "action": "Check TypeScript errors and missing imports",
      "message": "Review build output for specific error messages"
    },
    "missing_dependencies": {
      "action": "Re-run install_ui_deps command",
      "message": "Ensure all required packages are installed"
    }
  }
}
