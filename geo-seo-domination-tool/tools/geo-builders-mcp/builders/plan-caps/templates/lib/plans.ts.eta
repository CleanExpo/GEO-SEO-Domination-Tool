import { createClient } from '@supabase/supabase-js';

function svc(){ return createClient(process.env.SUPABASE_URL as string, process.env.SUPABASE_SERVICE_ROLE as string); }

export async function getPlanCaps(role: 'free'|'pro'|'admin'){
  const { data } = await svc().from('plan_defaults').select('caps').eq('role', role).maybeSingle();
  return (data?.caps || {}) as Record<string, number>;
}

export async function updatePlanCaps(role: 'free'|'pro'|'admin', caps: Record<string, number>){
  await svc().from('plan_defaults').update({ caps, updated_at: new Date().toISOString() }).eq('role', role);
}

// Bootstrap usage_limits for a workspace from user's role caps
export async function bootstrapWorkspaceLimits(workspaceId: string, userId: string){
  // Get user's role
  const { data: prof } = await svc().from('profiles').select('role').eq('id', userId).maybeSingle();
  const role = (prof?.role || 'free') as 'free'|'pro'|'admin';

  // Get plan defaults
  const caps = await getPlanCaps(role);

  // Check if usage_limits already exist for this workspace
  const { data: existing } = await svc()
    .from('usage_limits')
    .select('id')
    .eq('workspace_id', workspaceId)
    .maybeSingle();

  if (existing) return; // Already bootstrapped

  // Create usage_limits record from caps
  const limitsData = Object.entries(caps).map(([kind, limit]) => ({
    workspace_id: workspaceId,
    kind,
    limit,
    period: 'month' as const
  }));

  if (limitsData.length > 0) {
    await svc().from('usage_limits').insert(limitsData);
  }
}
