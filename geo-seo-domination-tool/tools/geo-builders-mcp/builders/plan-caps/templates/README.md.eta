# Builder: plan-caps

Creates plan default caps system with:
- **plan_defaults** table: Stores JSON caps per role (free/pro/admin)
- **Plans settings page**: `/settings/plans` for editing caps (admin only)
- **Plans API**: `/api/plans` for reading and updating caps
- **Helper library**: `lib/plans.ts` with functions to fetch/update caps and bootstrap workspace limits

## Features

### 1. Plan Defaults Table
- **Roles**: free, pro, admin
- **Caps**: JSON object with usage kinds (build, deploy, api_call, job, custom)
- **Seeded defaults**:
  - Free: 20 builds, 5 deploys, 200 API calls
  - Pro: 1000 builds, 300 deploys, 10,000 API calls
  - Admin: 100,000 builds, 50,000 deploys, 1,000,000 API calls

### 2. Plans Settings Page
- View all plan caps in grid layout
- Edit cap values per usage kind
- Add new cap kinds dynamically
- Admin-only access required
- Save button per plan

### 3. Plans API
- **GET /api/plans**: List all plan caps
- **POST /api/plans**: Update plan caps (admin only)

### 4. Helper Functions
- `getPlanCaps(role)`: Fetch caps for a role
- `updatePlanCaps(role, caps)`: Update caps for a role
- `bootstrapWorkspaceLimits(workspaceId, userId)`: Auto-create usage_limits from user's role caps

## Usage

### 1. Apply the Builder
```bash
# Via MCP server
call_mcp apply_builder --id plan-caps

# Or via Blueprints UI
```

### 2. Run SQL Migration
Copy SQL from `database/supabase/plan_defaults.sql` and run in Supabase SQL Editor.

Verify table created:
```sql
SELECT * FROM plan_defaults;
```

### 3. Access Plans Settings
Navigate to `/settings/plans` (admin only) to edit plan caps.

### 4. Use Helpers in Code

**Fetch plan caps:**
```typescript
import { getPlanCaps } from '@/lib/plans';

const freeCaps = await getPlanCaps('free');
console.log(freeCaps); // { build: 20, deploy: 5, api_call: 200 }
```

**Update plan caps:**
```typescript
import { updatePlanCaps } from '@/lib/plans';

await updatePlanCaps('pro', {
  build: 2000,
  deploy: 500,
  api_call: 50000,
  job: 1000
});
```

**Bootstrap workspace limits:**
```typescript
import { bootstrapWorkspaceLimits } from '@/lib/plans';

// When workspace is created
const workspaceId = 'workspace-uuid';
const userId = 'user-uuid';

await bootstrapWorkspaceLimits(workspaceId, userId);

// This creates usage_limits records from user's role caps
```

## Integration with Builds/Deploy APIs

Add auto-bootstrap to builds/deploy APIs:

```typescript
// In /api/builds or /api/deploy POST handler
import { bootstrapWorkspaceLimits } from '@/lib/plans';
import { getActiveWorkspaceId } from '@/lib/workspace';

const workspaceId = getActiveWorkspaceId();
if (workspaceId && user) {
  // Auto-bootstrap if first time
  await bootstrapWorkspaceLimits(workspaceId, user.id);
}

// Then proceed with quota enforcement
await enforceQuota(user.id, 'builds', 1, { workspaceId });
```

## API Reference

### GET /api/plans

**Response:**
```json
{
  "ok": true,
  "plans": [
    {
      "role": "free",
      "caps": {
        "build": 20,
        "deploy": 5,
        "api_call": 200
      }
    },
    {
      "role": "pro",
      "caps": {
        "build": 1000,
        "deploy": 300,
        "api_call": 10000
      }
    },
    {
      "role": "admin",
      "caps": {
        "build": 100000,
        "deploy": 50000,
        "api_call": 1000000
      }
    }
  ]
}
```

### POST /api/plans

**Request:**
```json
{
  "plan_role": "pro",
  "caps": {
    "build": 2000,
    "deploy": 500,
    "api_call": 50000,
    "job": 1000
  }
}
```

**Response:**
```json
{
  "ok": true,
  "message": "Plan caps updated"
}
```

**Error (non-admin):**
```json
{
  "ok": false,
  "error": "Admin access required"
}
```

## Database Schema

```sql
create table if not exists public.plan_defaults (
  role text primary key check (role in ('free','pro','admin')),
  caps jsonb not null,
  updated_at timestamptz default now()
);

-- RLS: Read for all, write via service role only
alter table public.plan_defaults enable row level security;
create policy plan_defaults_read on public.plan_defaults for select using (true);
```

## Testing

### 1. Verify Seeded Data
```sql
SELECT role, caps FROM plan_defaults ORDER BY role;
```

### 2. Test Plans API
```bash
# List plans
curl http://localhost:3000/api/plans | jq

# Update pro plan (as admin)
curl -X POST http://localhost:3000/api/plans \
  -H "Cookie: sb-access-token=..." \
  -H "Content-Type: application/json" \
  -d '{
    "plan_role": "pro",
    "caps": {
      "build": 2000,
      "deploy": 500,
      "api_call": 50000
    }
  }' | jq
```

### 3. Test Bootstrap Function
```typescript
// In your app
import { bootstrapWorkspaceLimits } from '@/lib/plans';

await bootstrapWorkspaceLimits('workspace-id', 'user-id');

// Verify in database
SELECT * FROM usage_limits WHERE workspace_id = 'workspace-id';
```

## Customization

### Add New Cap Kinds

**Via UI:**
1. Navigate to `/settings/plans`
2. Click "+ Add Cap Kind" on a plan
3. Enter kind name (e.g., "email_send")
4. Set limit value
5. Click "Save"

**Via SQL:**
```sql
UPDATE plan_defaults
SET caps = caps || '{"email_send": 100}'::jsonb
WHERE role = 'free';
```

**Via API:**
```typescript
import { updatePlanCaps, getPlanCaps } from '@/lib/plans';

const currentCaps = await getPlanCaps('free');
const newCaps = { ...currentCaps, email_send: 100 };
await updatePlanCaps('free', newCaps);
```

### Change Default Limits

```sql
-- Increase free tier builds
UPDATE plan_defaults
SET caps = jsonb_set(caps, '{build}', '50')
WHERE role = 'free';

-- Increase pro tier all caps by 50%
UPDATE plan_defaults
SET caps = (
  SELECT jsonb_object_agg(key, (value::int * 1.5)::int)
  FROM jsonb_each_text(caps)
)
WHERE role = 'pro';
```

## Troubleshooting

### Plans not loading in UI
1. Verify table exists: `SELECT * FROM plan_defaults;`
2. Check RLS policy: `SELECT * FROM pg_policies WHERE tablename = 'plan_defaults';`
3. Ensure user is authenticated

### Cannot save plans
1. Verify user has admin role: `SELECT role FROM profiles WHERE id = 'user-id';`
2. Check service role key is set: `echo $SUPABASE_SERVICE_ROLE`
3. Check API logs for errors

### Bootstrap not working
1. Verify `usage_limits` table exists
2. Check workspace_id is valid
3. Ensure user has role in profiles table
4. Verify plan_defaults has caps for user's role

## Integration Checklist

- [ ] Run SQL migration (`plan_defaults.sql`)
- [ ] Verify seeded data (`SELECT * FROM plan_defaults`)
- [ ] Set admin role for test user (`UPDATE profiles SET role='admin'`)
- [ ] Visit `/settings/plans` and verify UI loads
- [ ] Edit a plan cap and save successfully
- [ ] Add `bootstrapWorkspaceLimits()` to workspace creation flow
- [ ] Test quota enforcement with bootstrapped limits

## Notes

- **Role source**: `profiles.role` (set via Admin or Stripe webhook sync)
- **Cap kinds**: Use consistent naming (build, deploy, api_call, job, custom)
- **Per-workspace overrides**: Can be set later at `/settings/usage`
- **Bootstrap timing**: First build/deploy call auto-creates caps from user's role
