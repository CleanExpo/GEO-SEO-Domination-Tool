import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { createClient } from '@supabase/supabase-js';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

const STRIPE_SECRET = process.env.STRIPE_SECRET_KEY!;
const WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET!;
const SUPABASE_URL = process.env.SUPABASE_URL!;
const SUPABASE_SERVICE_ROLE = process.env.SUPABASE_SERVICE_ROLE!;

function isActive(status?: string){
  return status === 'active' || status === 'trialing' || status === 'past_due';
}

export async function POST(req: NextRequest){
  try{
    const sig = req.headers.get('stripe-signature');
    if (!sig) return NextResponse.json({ ok:false, error:'missing stripe-signature' }, { status:400 });

    const raw = await req.text();
    const stripe = new Stripe(STRIPE_SECRET, { apiVersion: '2024-06-20' });
    let event: Stripe.Event;
    try{
      event = stripe.webhooks.constructEvent(raw, sig, WEBHOOK_SECRET);
    }catch(err:any){
      return new NextResponse(`Bad signature: ${err.message}`, { status:400 });
    }

    const supa = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE);

    async function setRoleByEmail(email: string, role: 'free'|'pro'){
      if (!email) return { error: 'no email' } as const;
      const { data: users, error } = await supa.from('profiles').update({ role }).eq('email', email).select('id');
      return { users, error } as const;
    }

    switch(event.type){
      case 'checkout.session.completed': {
        const session = event.data.object as Stripe.Checkout.Session;
        const email = (session.customer_details?.email || session.customer_email) as string | undefined;
        if (email){ await setRoleByEmail(email, 'pro'); }
        break;
      }
      case 'customer.subscription.created':
      case 'customer.subscription.updated':
      case 'customer.subscription.deleted':
      case 'customer.subscription.paused': {
        const sub = event.data.object as Stripe.Subscription;
        let email: string | undefined;
        if (typeof sub.customer === 'string'){
          const cust = await stripe.customers.retrieve(sub.customer);
          if (!cust.deleted) email = cust.email || undefined;
        }
        if (email){ await setRoleByEmail(email, isActive(sub.status) ? 'pro' : 'free'); }
        break;
      }
      default: break;
    }

    return NextResponse.json({ ok:true });
  }catch(e:any){
    return NextResponse.json({ ok:false, error: e?.message || 'unknown error' }, { status:500 });
  }
}
