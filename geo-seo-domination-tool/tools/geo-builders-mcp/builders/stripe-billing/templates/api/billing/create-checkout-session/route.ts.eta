import { NextRequest, NextResponse } from 'next/server';
import { createServerClient } from '@supabase/ssr';
import { getStripe, getBaseUrl } from '@/lib/stripe';
import { attachCustomerToUser, ensureStripeCustomerForUser } from '@/lib/billing';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

export async function POST(req: NextRequest){
  try{
    const body = await req.json().catch(()=>({}));
    const priceId = String(body?.priceId || '').trim();
    if (!priceId) return NextResponse.json({ ok:false, error:'priceId required' }, { status:400 });

    const supa = createServerClient(process.env.SUPABASE_URL as string, process.env.SUPABASE_ANON_KEY as string, { cookies: { get: (n)=> req.cookies.get(n)?.value, set(){}, remove(){} } });
    const { data: { user } } = await supa.auth.getUser();
    if (!user) return NextResponse.json({ ok:false, error:'unauthorized' }, { status:401 });

    const stripe = getStripe();

    // Ensure a customer exists
    let customerId = await ensureStripeCustomerForUser(user);
    if (!customerId){
      const cust = await stripe.customers.create({ email: user.email || undefined, metadata: { supabase_id: user.id } });
      customerId = cust.id;
      await attachCustomerToUser(user, customerId);
    }

    const base = getBaseUrl();
    const session = await stripe.checkout.sessions.create({
      mode: 'subscription',
      customer: customerId,
      line_items: [{ price: priceId, quantity: 1 }],
      success_url: `${base}/settings/billing?status=success`,
      cancel_url: `${base}/settings/billing?status=cancel`,
      allow_promotion_codes: true
    });

    return NextResponse.json({ ok:true, result:{ id: session.id, url: session.url } }, { status:200 });
  }catch(e:any){ return NextResponse.json({ ok:false, error: e?.message||'unknown error' }, { status:500 }); }
}
