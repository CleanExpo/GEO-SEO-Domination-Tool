import { NextRequest, NextResponse } from 'next/server';
import { createServerClient } from '@supabase/ssr';
import { createClient } from '@supabase/supabase-js';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

type Role = 'free'|'pro'|'admin';
function svc(){ return createClient(process.env.SUPABASE_URL as string, process.env.SUPABASE_SERVICE_ROLE as string); }

async function me(req: NextRequest){
  const supa = createServerClient(process.env.SUPABASE_URL as string, process.env.SUPABASE_ANON_KEY as string, { cookies: { get: (n)=> req.cookies.get(n)?.value, set(){}, remove(){} } });
  const { data: { user } } = await supa.auth.getUser();
  if (!user) return { user:null, role: 'free' as Role };
  const { data: prof } = await svc().from('profiles').select('role').eq('id', user.id).maybeSingle();
  return { user, role: (prof?.role || 'free') as Role };
}

export async function GET(req: NextRequest){
  const mine = await me(req);
  if (req.nextUrl.searchParams.get('list')){
    // Admin-only user list (id+email+role)
    if (mine.role !== 'admin') return NextResponse.json({ ok:false, error:'forbidden' }, { status:403 });
    const { data: users } = await svc().from('profiles').select('id,email,role').order('email');
    return NextResponse.json({ ok:true, result:{ role: mine.role, users: users||[] } }, { status:200 });
  }
  return NextResponse.json({ ok:true, result:{ role: mine.role } }, { status:200 });
}

export async function PUT(req: NextRequest){
  const mine = await me(req);
  if (mine.role !== 'admin') return NextResponse.json({ ok:false, error:'forbidden' }, { status:403 });
  const body = await req.json().catch(()=>({}));
  const email = String(body?.email||'').trim().toLowerCase();
  const role = String(body?.role||'free');
  if (!email || !['free','pro','admin'].includes(role)) return NextResponse.json({ ok:false, error:'bad_request' }, { status:400 });
  // find user by email
  const { data: u } = await svc().from('profiles').select('id').eq('email', email).maybeSingle();
  if (!u?.id) return NextResponse.json({ ok:false, error:'user_not_found' }, { status:404 });
  const { error } = await svc().from('profiles').update({ role }).eq('id', u.id);
  if (error) return NextResponse.json({ ok:false, error: error.message }, { status:500 });
  return NextResponse.json({ ok:true }, { status:200 });
}
