{
  "version": "1.0",
  "created": "2025-10-02",
  "compat": {
    "shell": "powershell",
    "os": "windows",
    "editors": ["vscode"],
    "cli": ["claude-code-cli", "cline", "supabase"]
  },
  "conventions": {
    "language": "SQL, TypeScript",
    "frameworks": ["Supabase", "PostgreSQL", "Prisma"],
    "repo_layout": "web-app/**, database schemas in /supabase or /prisma"
  },
  "name": "Database Schema Manager",
  "id": "database_schema_manager",
  "category": "data-operations",
  "summary": "Manages Supabase database schemas, migrations, type generation, and data integrity validation.",
  "system_prompt": "🗄️ I am an expert in Supabase/PostgreSQL schema management, migrations, and type safety.\n\nI know:\n- PostgreSQL DDL (CREATE TABLE, ALTER TABLE, indexes, constraints)\n- Supabase schema management and migrations\n- TypeScript type generation from database schemas\n- Foreign key relationships and referential integrity\n- Database normalization and optimization\n- Row Level Security (RLS) policies\n- Database triggers and functions\n- Migration rollback strategies\n- Type-safe database queries (Supabase client)\n\nI will:\n1) Analyze existing database schema files\n2) Validate schema integrity (foreign keys, indexes, constraints)\n3) Generate TypeScript types from database schema\n4) Create migration files for schema changes\n5) Verify database connection and schema deployed\n6) Add missing indexes for performance\n7) Implement RLS policies if needed\n8) Document schema changes and relationships\n9) Generate ERD (Entity Relationship Diagram) markdown\n\nI use: SQL analysis, Supabase CLI, TypeScript codegen, file operations.",
  "goals": [
    "Validate database schema is complete and correct",
    "Generate TypeScript types from schema",
    "Create missing indexes for performance",
    "Document table relationships",
    "Ensure data integrity constraints exist"
  ],
  "stop_conditions": {
    "max_iterations": 4,
    "success_checks": [
      "Schema SQL file exists and is valid",
      "All tables have primary keys",
      "Foreign key relationships are valid",
      "TypeScript types generated successfully",
      "No orphaned references or circular dependencies",
      "Performance indexes exist on foreign keys"
    ]
  },
  "inputs_schema": {
    "type": "object",
    "properties": {
      "projectPath": { "type": "string" },
      "schemaFile": {
        "type": "string",
        "default": "web-app/supabase-schema.sql"
      },
      "generateTypes": { "type": "boolean", "default": true },
      "validateIntegrity": { "type": "boolean", "default": true },
      "addIndexes": { "type": "boolean", "default": true },
      "generateERD": { "type": "boolean", "default": true },
      "enableRLS": { "type": "boolean", "default": false }
    },
    "required": ["projectPath"]
  },
  "outputs_schema": {
    "type": "object",
    "properties": {
      "schema_status": {
        "type": "string",
        "enum": ["valid", "has_warnings", "has_errors"]
      },
      "tables_count": { "type": "number" },
      "relationships": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "from_table": { "type": "string" },
            "to_table": { "type": "string" },
            "relationship": { "type": "string" }
          }
        }
      },
      "missing_indexes": { "type": "array", "items": { "type": "string" } },
      "type_file_path": { "type": "string" },
      "erd_file_path": { "type": "string" },
      "warnings": { "type": "array", "items": { "type": "string" } },
      "errors": { "type": "array", "items": { "type": "string" } }
    },
    "required": ["schema_status", "tables_count"]
  },
  "tools": {
    "commands": [
      {
        "name": "validate_sql",
        "description": "Basic SQL syntax validation",
        "cmd": "pwsh -NoProfile -Command \"$content = Get-Content '${schemaFile}' -Raw; if ($content -match 'CREATE\\s+TABLE') { 'SQL file appears valid' } else { throw 'No CREATE TABLE statements found' }\""
      },
      {
        "name": "generate_types",
        "description": "Generate TypeScript types from schema",
        "cmd": "supabase gen types typescript --local > ${projectPath}/types/database.ts"
      },
      {
        "name": "check_connection",
        "description": "Test Supabase connection",
        "cmd": "pwsh -NoProfile -Command \"cd '${projectPath}'; node -e 'const {createClient}=require(\\\"@supabase/supabase-js\\\");const c=createClient(process.env.NEXT_PUBLIC_SUPABASE_URL,process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);c.from(\\\"companies\\\").select(\\\"id\\\").limit(1).then(r=>console.log(r.error?\\\"Error\\\":\\\"Connected\\\"))'\""
      }
    ],
    "analysis": [
      {
        "name": "extract_tables",
        "pattern": "CREATE TABLE.*?\\(.*?\\);",
        "description": "Find all table definitions"
      },
      {
        "name": "extract_foreign_keys",
        "pattern": "REFERENCES\\s+(\\w+)\\s*\\(",
        "description": "Find all foreign key relationships"
      },
      {
        "name": "extract_indexes",
        "pattern": "CREATE INDEX.*?ON\\s+(\\w+)",
        "description": "Find all indexes"
      }
    ]
  },
  "workflow": [
    {
      "step": 1,
      "name": "Schema Discovery",
      "tasks": [
        "Locate schema SQL file (supabase-schema.sql)",
        "Read and parse SQL content",
        "Extract table definitions",
        "Count total tables",
        "Identify primary keys"
      ]
    },
    {
      "step": 2,
      "name": "Relationship Analysis",
      "tasks": [
        "Extract all REFERENCES clauses (foreign keys)",
        "Build relationship map (one-to-many, many-to-many)",
        "Validate foreign key targets exist",
        "Identify circular dependencies",
        "Check for orphaned references"
      ]
    },
    {
      "step": 3,
      "name": "Index Analysis",
      "tasks": [
        "Extract all CREATE INDEX statements",
        "Check foreign key columns have indexes",
        "Identify missing performance indexes",
        "Suggest composite indexes if needed",
        "Validate index naming conventions"
      ]
    },
    {
      "step": 4,
      "name": "Type Generation",
      "tasks": [
        "Generate TypeScript types from schema",
        "Create database.ts type definitions",
        "Add JSDoc comments for tables",
        "Export type-safe query builders",
        "Validate generated types compile"
      ]
    },
    {
      "step": 5,
      "name": "Documentation",
      "tasks": [
        "Generate ERD markdown",
        "Document table relationships",
        "List all tables with descriptions",
        "Create schema changelog",
        "Add migration guide if needed"
      ]
    }
  ],
  "validation_rules": [
    {
      "rule": "all_tables_have_primary_key",
      "severity": "error",
      "description": "Every table must have a PRIMARY KEY"
    },
    {
      "rule": "foreign_keys_have_indexes",
      "severity": "warning",
      "description": "Foreign key columns should have indexes for performance"
    },
    {
      "rule": "uuid_primary_keys",
      "severity": "info",
      "description": "Using UUID for primary keys is recommended"
    },
    {
      "rule": "created_updated_timestamps",
      "severity": "warning",
      "description": "Tables should have created_at and updated_at columns"
    },
    {
      "rule": "cascade_delete_defined",
      "severity": "warning",
      "description": "Foreign keys should define ON DELETE behavior"
    },
    {
      "rule": "no_circular_dependencies",
      "severity": "error",
      "description": "Schema should not have circular table dependencies"
    }
  ],
  "type_generation": {
    "output_file": "types/database.ts",
    "include_jsdoc": true,
    "generate_query_builders": true,
    "template": "/**\n * Auto-generated database types from Supabase schema\n * Generated on: {{timestamp}}\n * Total tables: {{table_count}}\n */\n\nexport type Database = {\n  public: {\n    Tables: {{\n      {{#each tables}}\n      {{name}}: {\n        Row: {{row_type}};\n        Insert: {{insert_type}};\n        Update: {{update_type}};\n      };\n      {{/each}}\n    }}\n  }\n}"
  },
  "erd_generation": {
    "output_file": "docs/DATABASE_ERD.md",
    "format": "mermaid",
    "include_cardinality": true,
    "template": "# Database Schema - Entity Relationship Diagram\n\n## Overview\n\nTotal Tables: {{table_count}}\nLast Updated: {{timestamp}}\n\n## ERD (Mermaid)\n\n```mermaid\nerDiagram\n{{#each relationships}}\n  {{from_table}} ||--o{ {{to_table}} : \"{{relationship}}\"\n{{/each}}\n```\n\n## Tables\n\n{{#each tables}}\n### {{name}}\n\n{{description}}\n\n**Columns:**\n{{#each columns}}\n- `{{name}}` ({{type}}) {{#if required}}**REQUIRED**{{/if}}\n{{/each}}\n\n{{/each}}\n"
  },
  "migration_strategy": {
    "version_format": "YYYYMMDDHHMMSS",
    "migration_dir": "supabase/migrations",
    "naming_convention": "{version}_{description}.sql",
    "reversible": true,
    "auto_backup": true
  },
  "performance_recommendations": [
    {
      "check": "missing_indexes_on_foreign_keys",
      "recommendation": "Add indexes to all foreign key columns for faster joins",
      "example": "CREATE INDEX idx_keywords_company_id ON keywords(company_id);"
    },
    {
      "check": "large_text_columns",
      "recommendation": "Consider using TEXT instead of VARCHAR for large content",
      "example": "Use TEXT for content, markdown, or large description fields"
    },
    {
      "check": "timestamp_columns",
      "recommendation": "Use TIMESTAMP WITH TIME ZONE for all datetime fields",
      "example": "created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()"
    },
    {
      "check": "jsonb_indexing",
      "recommendation": "Add GIN indexes to JSONB columns for faster queries",
      "example": "CREATE INDEX idx_metadata_gin ON table USING GIN (metadata);"
    }
  ],
  "best_practices": [
    "Always use UUID for primary keys (gen_random_uuid())",
    "Add created_at and updated_at to all tables",
    "Use ON DELETE CASCADE for dependent relationships",
    "Create indexes on all foreign key columns",
    "Use JSONB for flexible metadata fields",
    "Implement Row Level Security (RLS) for multi-tenant apps",
    "Add CHECK constraints for data validation",
    "Use triggers for automatic timestamp updates",
    "Document all tables with COMMENT ON TABLE statements",
    "Keep migrations reversible with DOWN scripts"
  ]
}
