version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: geo-seo-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-geoseo}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
      POSTGRES_DB: ${POSTGRES_DB:-geo_seo_db}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - geo-seo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-geoseo} -d ${POSTGRES_DB:-geo_seo_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: geo-seo-redis-prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD must be set}
    volumes:
      - redis_data:/data
    networks:
      - geo-seo-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Next.js Web Application
  web-app:
    build:
      context: ./geo-seo-domination-tool/web-app
      dockerfile: Dockerfile
      target: runner
      args:
        - NODE_ENV=production
    container_name: geo-seo-web-prod
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:?NEXT_PUBLIC_APP_URL must be set}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-geoseo}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-geo_seo_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - SEMRUSH_API_KEY=${SEMRUSH_API_KEY}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "3000:3000"
    networks:
      - geo-seo-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Nginx Reverse Proxy (Optional - for SSL and load balancing)
  nginx:
    image: nginx:alpine
    container_name: geo-seo-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - geo-seo-network
    depends_on:
      - web-app
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  geo-seo-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
