/**
 * <%= it.resourceName %> API Route
 * Generated by geo-builders-mcp
 */

import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';

// Validation schema for <%= it.resourceName %>
const <%= it.resourceName %>Schema = z.object({
  // TODO: Define your schema properties
  // Example:
  // name: z.string().min(1),
  // email: z.string().email(),
});

type <%= it.resourceName %> = z.infer<typeof <%= it.resourceName %>Schema>;

<% if (it.methods.includes('GET')) { %>
/**
 * GET /api/<%= it.routeName %>
 * List all <%= it.routeName %>
 */
export async function GET(request: NextRequest) {
  try {
    <% if (it.hasAuth) { %>
    // TODO: Add authentication check
    // const session = await getSession(request);
    // if (!session) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }
    <% } %>

    // TODO: Fetch <%= it.routeName %> from database
    // const <%= it.routeName %> = await db.<%= it.routeName %>.findMany();

    const <%= it.routeName %>: <%= it.resourceName %>[] = [];

    return NextResponse.json({ <%= it.routeName %> }, { status: 200 });
  } catch (error) {
    console.error('Error fetching <%= it.routeName %>:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
<% } %>

<% if (it.methods.includes('POST')) { %>
/**
 * POST /api/<%= it.routeName %>
 * Create a new <%= it.resourceName.toLowerCase() %>
 */
export async function POST(request: NextRequest) {
  try {
    <% if (it.hasAuth) { %>
    // TODO: Add authentication check
    // const session = await getSession(request);
    // if (!session) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }
    <% } %>

    const body = await request.json();

    // Validate request body
    const validationResult = <%= it.resourceName %>Schema.safeParse(body);
    if (!validationResult.success) {
      return NextResponse.json(
        { error: 'Invalid request body', details: validationResult.error.errors },
        { status: 400 }
      );
    }

    const data = validationResult.data;

    // TODO: Create <%= it.resourceName.toLowerCase() %> in database
    // const new<%= it.resourceName %> = await db.<%= it.routeName %>.create({
    //   data,
    // });

    return NextResponse.json(
      { message: '<%= it.resourceName %> created successfully' },
      { status: 201 }
    );
  } catch (error) {
    console.error('Error creating <%= it.resourceName.toLowerCase() %>:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
<% } %>

<% if (it.methods.includes('PUT')) { %>
/**
 * PUT /api/<%= it.routeName %>
 * Update an existing <%= it.resourceName.toLowerCase() %>
 */
export async function PUT(request: NextRequest) {
  try {
    <% if (it.hasAuth) { %>
    // TODO: Add authentication check
    <% } %>

    const body = await request.json();
    const validationResult = <%= it.resourceName %>Schema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        { error: 'Invalid request body', details: validationResult.error.errors },
        { status: 400 }
      );
    }

    // TODO: Update <%= it.resourceName.toLowerCase() %> in database

    return NextResponse.json(
      { message: '<%= it.resourceName %> updated successfully' },
      { status: 200 }
    );
  } catch (error) {
    console.error('Error updating <%= it.resourceName.toLowerCase() %>:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
<% } %>

<% if (it.methods.includes('DELETE')) { %>
/**
 * DELETE /api/<%= it.routeName %>
 * Delete a <%= it.resourceName.toLowerCase() %>
 */
export async function DELETE(request: NextRequest) {
  try {
    <% if (it.hasAuth) { %>
    // TODO: Add authentication check
    <% } %>

    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json(
        { error: 'Missing required parameter: id' },
        { status: 400 }
      );
    }

    // TODO: Delete <%= it.resourceName.toLowerCase() %> from database

    return NextResponse.json(
      { message: '<%= it.resourceName %> deleted successfully' },
      { status: 200 }
    );
  } catch (error) {
    console.error('Error deleting <%= it.resourceName.toLowerCase() %>:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
<% } %>
