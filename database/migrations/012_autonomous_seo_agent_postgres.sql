-- Migration: Add Autonomous SEO Agent Tables (PostgreSQL Version)
-- Version: 012
-- Date: 2025-01-11
-- PRD: #0005 - Autonomous SEO Agent Dashboard
-- Target: Supabase/PostgreSQL Production

-- This migration adds all necessary tables for the autonomous SEO agent system

-- Agent Schedules Table
-- Stores scheduled tasks for the autonomous agent
CREATE TABLE IF NOT EXISTS agent_schedules (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  type TEXT NOT NULL CHECK(type IN ('audit', 'content', 'technical', 'rankings')),
  frequency TEXT NOT NULL CHECK(frequency IN ('daily', 'weekly', 'custom')),
  cron_expression TEXT,
  time TEXT,
  enabled BOOLEAN DEFAULT true,
  companies JSONB, -- JSON array of company IDs
  config JSONB, -- JSON configuration
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Agent Alerts Table
-- Stores alerts generated by the autonomous agent
CREATE TABLE IF NOT EXISTS agent_alerts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  type TEXT NOT NULL CHECK(type IN ('ranking_drop', 'performance_drop', 'error', 'opportunity')),
  severity TEXT NOT NULL CHECK(severity IN ('low', 'medium', 'high', 'critical')),
  company_id UUID,
  message TEXT NOT NULL,
  data JSONB, -- JSON data
  acknowledged BOOLEAN DEFAULT false,
  acknowledged_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE
);

-- Alert Configuration Table
-- Stores user preferences for alert thresholds and channels
CREATE TABLE IF NOT EXISTS agent_alert_config (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID,
  ranking_drop_threshold INTEGER DEFAULT 5,
  performance_drop_threshold INTEGER DEFAULT 20,
  channels JSONB NOT NULL, -- JSON array: ["email", "slack", "sms"]
  frequency TEXT NOT NULL CHECK(frequency IN ('immediate', 'hourly', 'daily_digest')),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Company Autopilot Settings Table
-- Stores autopilot configuration per company
CREATE TABLE IF NOT EXISTS company_autopilot (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID NOT NULL UNIQUE,
  enabled BOOLEAN DEFAULT false,
  schedule TEXT DEFAULT 'daily',
  features JSONB, -- JSON array: ["audits", "content", "technical", "rankings"]
  last_run TIMESTAMPTZ,
  next_run TIMESTAMPTZ,
  stats JSONB, -- JSON statistics
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_agent_schedules_enabled ON agent_schedules(enabled);
CREATE INDEX IF NOT EXISTS idx_agent_schedules_type ON agent_schedules(type);
CREATE INDEX IF NOT EXISTS idx_agent_schedules_created ON agent_schedules(created_at);

CREATE INDEX IF NOT EXISTS idx_agent_alerts_type ON agent_alerts(type);
CREATE INDEX IF NOT EXISTS idx_agent_alerts_severity ON agent_alerts(severity);
CREATE INDEX IF NOT EXISTS idx_agent_alerts_company ON agent_alerts(company_id);
CREATE INDEX IF NOT EXISTS idx_agent_alerts_acknowledged ON agent_alerts(acknowledged);
CREATE INDEX IF NOT EXISTS idx_agent_alerts_created ON agent_alerts(created_at);

CREATE INDEX IF NOT EXISTS idx_agent_alert_config_user ON agent_alert_config(user_id);

CREATE INDEX IF NOT EXISTS idx_company_autopilot_company ON company_autopilot(company_id);
CREATE INDEX IF NOT EXISTS idx_company_autopilot_enabled ON company_autopilot(enabled);

-- Enable Row Level Security (RLS)
ALTER TABLE agent_schedules ENABLE ROW LEVEL SECURITY;
ALTER TABLE agent_alerts ENABLE ROW LEVEL SECURITY;
ALTER TABLE agent_alert_config ENABLE ROW LEVEL SECURITY;
ALTER TABLE company_autopilot ENABLE ROW LEVEL SECURITY;

-- RLS Policies (Allow all for service role, restrict for authenticated users)
CREATE POLICY "Allow service role full access to agent_schedules" ON agent_schedules
  FOR ALL USING (true);

CREATE POLICY "Allow service role full access to agent_alerts" ON agent_alerts
  FOR ALL USING (true);

CREATE POLICY "Allow service role full access to agent_alert_config" ON agent_alert_config
  FOR ALL USING (true);

CREATE POLICY "Allow service role full access to company_autopilot" ON company_autopilot
  FOR ALL USING (true);

-- ROLLBACK:
-- DROP TABLE IF EXISTS company_autopilot CASCADE;
-- DROP TABLE IF EXISTS agent_alert_config CASCADE;
-- DROP TABLE IF EXISTS agent_alerts CASCADE;
-- DROP TABLE IF EXISTS agent_schedules CASCADE;
