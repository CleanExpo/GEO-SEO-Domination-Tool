openapi: 3.1.0
info:
  title: GEO-SEO Domination API
  version: 1.0.0
  description: |
    RESTful API for SEO analysis, ranking tracking, CRM orchestration, and multi-tenant project management.

    ## Authentication
    All endpoints require a valid JWT bearer token obtained via Supabase Auth.

    ## Multi-Tenancy
    All data is scoped to the user's current organisation. Users must be members of an organisation to access data.

    ## Rate Limits
    - Free: 10 requests/hour
    - Starter: 100 requests/hour
    - Pro: 1,000 requests/hour
    - Enterprise: 10,000 requests/hour

  contact:
    name: API Support
    email: support@geo-seo-domination.com
  license:
    name: Proprietary
    url: https://geo-seo-domination.com/terms

servers:
  - url: https://geo-seo-domination.vercel.app/api
    description: Production
  - url: http://localhost:3000/api
    description: Development

tags:
  - name: Companies
    description: Company management endpoints
  - name: Audits
    description: SEO audit execution and results
  - name: Keywords
    description: Keyword tracking and ranking
  - name: Organisations
    description: Multi-tenant organisation management
  - name: CRM
    description: CRM contacts, deals, and tasks
  - name: GitHub
    description: GitHub integration and webhooks

paths:
  # Companies Endpoints
  /companies:
    get:
      summary: List companies
      description: Returns a list of companies for the authenticated user's organisation
      tags: [Companies]
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '401':
          $ref: '#/components/responses/Unauthorised'

    post:
      summary: Create company
      description: Create a new company in the current organisation
      tags: [Companies]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, address, city, state, zip, phone, website]
              properties:
                name:
                  type: string
                  example: "Acme Corp"
                address:
                  type: string
                  example: "123 Main St"
                city:
                  type: string
                  example: "Sydney"
                state:
                  type: string
                  example: "NSW"
                zip:
                  type: string
                  example: "2000"
                phone:
                  type: string
                  example: "+61-2-1234-5678"
                website:
                  type: string
                  format: uri
                  example: "https://acme.com"
                industry:
                  type: string
                  example: "Technology"
      responses:
        '201':
          description: Company created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorised'

  /companies/{id}:
    get:
      summary: Get company by ID
      tags: [Companies]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CompanyId'
      responses:
        '200':
          description: Company details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          $ref: '#/components/responses/NotFound'

  /companies/{id}/audits:
    post:
      summary: Run SEO audit
      description: Trigger a new SEO audit for a company (Lighthouse, E-E-A-T, Local Pack)
      tags: [Audits]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CompanyId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [audit_type]
              properties:
                audit_type:
                  type: string
                  enum: [lighthouse, eeat, local_pack]
                  example: "lighthouse"
      responses:
        '201':
          description: Audit started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Audit'

  # Keywords Endpoints
  /keywords:
    get:
      summary: List keywords
      tags: [Keywords]
      security:
        - bearerAuth: []
      parameters:
        - name: company_id
          in: query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: List of keywords
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Keyword'

  # Organisations Endpoints
  /organisations/list:
    get:
      summary: List user's organisations
      description: Returns all organisations the current user belongs to
      tags: [Organisations]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of organisations
          content:
            application/json:
              schema:
                type: object
                properties:
                  organisations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organisation'
                  count:
                    type: integer

  /organisations/switch:
    post:
      summary: Switch organisation context
      tags: [Organisations]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [organisationId]
              properties:
                organisationId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Organisation switched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  organisationId:
                    type: string

  # Webhooks
  /webhooks/github:
    post:
      summary: GitHub webhook endpoint
      description: Handles GitHub events (push, pull_request, issues, release)
      tags: [GitHub]
      security: []  # Uses HMAC signature instead of bearer token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: GitHub webhook payload (varies by event type)
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  deliveryId:
                    type: string
                  eventType:
                    type: string
        '403':
          description: Invalid signature

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from Supabase Auth

  parameters:
    CompanyId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Company UUID

  schemas:
    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Acme Corp"
        address:
          type: string
          example: "123 Main St"
        city:
          type: string
          example: "Sydney"
        state:
          type: string
          example: "NSW"
        zip:
          type: string
          example: "2000"
        phone:
          type: string
          example: "+61-2-1234-5678"
        website:
          type: string
          format: uri
          example: "https://acme.com"
        industry:
          type: string
          example: "Technology"
        created_at:
          type: string
          format: date-time
          example: "2025-10-06T12:00:00Z"

    Audit:
      type: object
      properties:
        id:
          type: string
          format: uuid
        company_id:
          type: string
          format: uuid
        audit_date:
          type: string
          format: date-time
        lighthouse_scores:
          type: object
          properties:
            performance:
              type: number
              example: 92
            accessibility:
              type: number
              example: 88
            seo:
              type: number
              example: 95
        priority_level:
          type: string
          enum: [low, medium, high, critical]

    Keyword:
      type: object
      properties:
        id:
          type: string
          format: uuid
        company_id:
          type: string
          format: uuid
        keyword:
          type: string
          example: "SEO services Sydney"
        location:
          type: string
          example: "Sydney, NSW"
        search_volume:
          type: integer
          example: 1200
        current_rank:
          type: integer
          example: 3
        last_checked:
          type: string
          format: date-time

    Organisation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Acme Organisation"
        slug:
          type: string
          example: "acme-org"
        plan:
          type: string
          enum: [free, starter, pro, enterprise]
        role:
          type: string
          enum: [owner, admin, member, viewer]

  responses:
    Unauthorised:
      description: Unauthorised - Invalid or missing JWT token
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid or missing authentication token"

    BadRequest:
      description: Bad Request - Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Validation failed: name is required"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Company not found"
