-- Add admin role value constraint if role column exists
-- Run this after supabase-profiles-role builder

-- Update role column to allow 'admin' value
alter table if exists <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>
  drop constraint if exists <%= TABLE_NAME || 'profiles' %>_role_check;

alter table if exists <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>
  add constraint <%= TABLE_NAME || 'profiles' %>_role_check
  check (role in ('free', 'pro', 'admin'));

-- RLS Policy: Admins can view all profiles
create policy if not exists "Admins can view all profiles"
  on <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>
  for select
  using (
    exists (
      select 1 from <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>
      where id = auth.uid() and role = 'admin'
    )
  );

-- RLS Policy: Admins can update all profiles
create policy if not exists "Admins can update all profiles"
  on <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>
  for update
  using (
    exists (
      select 1 from <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>
      where id = auth.uid() and role = 'admin'
    )
  );

-- Function to check if current user is admin
create or replace function <%= SCHEMA_NAME || 'public' %>.is_admin()
returns boolean as $$
begin
  return exists (
    select 1 from <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>
    where id = auth.uid() and role = 'admin'
  );
end;
$$ language plpgsql security definer;
