import { createClient } from '@supabase/supabase-js';
import { createServerClient } from '@supabase/ssr';

export type Role = 'free'|'pro'|'admin';

export async function getUserAndRoleFromRequest(req: Request){
  const supa = createServerClient(process.env.SUPABASE_URL as string, process.env.SUPABASE_ANON_KEY as string, {
    cookies: { get: (n)=> (req as any).cookies?.get(n)?.value, set(){}, remove(){} }
  });
  const { data: { user } } = await supa.auth.getUser();
  if (!user) return { user:null, role: 'free' as Role };
  // Fetch role from profiles with service role (server-side only)
  const svc = createClient(process.env.SUPABASE_URL as string, process.env.SUPABASE_SERVICE_ROLE as string);
  const { data: prof } = await svc.from('profiles').select('role').eq('id', user.id).maybeSingle();
  const role = (prof?.role || 'free') as Role;
  return { user, role };
}

export function isAllowed(role: Role, allowed: Role[]){
  return allowed.includes(role);
}

export function requiredForPath(pathname: string): Role[]|null {
  // Map protected prefixes â†’ allowed roles (edit to taste)
  const rules: Array<{ prefix: string; roles: Role[] }> = [
    { prefix: '/settings/plans', roles: ['admin'] },
    { prefix: '/api/plans', roles: ['admin'] },
    { prefix: '/settings/roles', roles: ['admin'] },
    { prefix: '/api/roles', roles: ['admin'] },
    // Pro-only examples
    { prefix: '/projects/builds', roles: ['pro','admin'] },
    { prefix: '/projects/autolink', roles: ['pro','admin'] }
  ];
  const match = rules.find(r => pathname.startsWith(r.prefix));
  return match ? match.roles : null;
}
