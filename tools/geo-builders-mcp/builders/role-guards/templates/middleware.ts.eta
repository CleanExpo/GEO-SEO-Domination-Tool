import { NextResponse, type NextRequest } from 'next/server';
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';
import { requiredForPath, isAllowed } from '@/lib/roles';

export async function middleware(req: NextRequest){
  const res = NextResponse.next();
  const url = req.nextUrl.clone();

  // Public paths (no auth)
  const publicPaths = ['/auth/', '/api/auth/', '/api/health', '/projects', '/projects/catalog', '/'];
  const isPublic = publicPaths.some(p => url.pathname === p || url.pathname.startsWith(p));

  // Auth
  const supabase = createMiddlewareClient({ req, res });
  const { data: { session } } = await supabase.auth.getSession();
  if (!session && !isPublic){ url.pathname = '/auth/sign-in'; return NextResponse.redirect(url); }

  // Role guard: only if logged in and route has a rule
  const needed = requiredForPath(url.pathname);
  if (session && needed){
    try {
      const me = await fetch(new URL('/api/auth/user', req.url), { headers: { cookie: req.headers.get('cookie')||'' } });
      const j = await me.json();
      const email = j?.result?.user?.email || null;
      // Ask server-side role via lightweight endpoint to avoid service role here
      const who = await fetch(new URL('/api/roles', req.url), { headers: { cookie: req.headers.get('cookie')||'' } });
      const jr = await who.json();
      const role = jr?.result?.role || 'free';
      if (!isAllowed(role, needed)) { url.pathname = '/403'; return NextResponse.redirect(url); }
    } catch { /* fail-open to avoid hard lockouts; admin APIs also verify on server */ }
  }

  return res;
}

export const config = { matcher: ['/((?!_next/static|_next/image|favicon.ico|public).*)'] };
