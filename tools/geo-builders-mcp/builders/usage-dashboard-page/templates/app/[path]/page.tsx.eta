import { cookies } from 'next/headers';
import { createServerClient } from '@supabase/ssr';
import { redirect } from 'next/navigation';

export const dynamic = 'force-dynamic';

async function getUsageData(){
  const cookieStore = cookies();
  const supa = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() { return cookieStore.getAll(); },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options));
          } catch {}
        }
      }
    }
  );

  const { data: { user } } = await supa.auth.getUser();
  if (!user) return null;

  // Call get_usage_summary function
  const { data: summary } = await supa.rpc('get_usage_summary', {
    p_user_id: user.id,
    p_period: 'month',
    p_workspace_id: null
  });

  const { data: profile } = await supa.from('profiles').select('role,email').eq('id', user.id).single();

  return { user, profile, summary: summary || [] };
}

export default async function UsagePage(){
  const data = await getUsageData();

  if (!data) {
    redirect('/login');
  }

  const { user, profile, summary } = data;

  return (
    <div className='max-w-4xl mx-auto p-6 space-y-6'>
      <div>
        <h1 className='text-2xl font-bold mb-1'>Usage & Quotas</h1>
        <p className='text-sm text-gray-600'>
          Your current plan: <span className='font-semibold capitalize'>{profile?.role || 'free'}</span>
        </p>
      </div>

      <div className='grid gap-4'>
        {summary.map((metric: any) => {
          const current = Number(metric.current_usage || 0);
          const limit = Number(metric.quota_limit || 0);
          const remaining = Number(metric.remaining || 0);
          const percentage = limit > 0 ? Math.min((current / limit) * 100, 100) : 0;
          const isUnlimited = limit === -1 || limit > 999999999;
          const isExceeded = !metric.allowed;

          return (
            <div key={metric.metric_type} className='border rounded-lg p-4 bg-white shadow-sm'>
              <div className='flex items-center justify-between mb-2'>
                <div>
                  <h3 className='font-semibold capitalize'>
                    {metric.metric_type.replace(/_/g, ' ')}
                  </h3>
                  <p className='text-sm text-gray-600'>
                    {isUnlimited ? 'Unlimited' : `${current.toLocaleString()} / ${limit.toLocaleString()}`}
                  </p>
                </div>
                {isExceeded && !isUnlimited && (
                  <span className='px-2 py-1 text-xs font-semibold bg-red-100 text-red-800 rounded'>
                    Exceeded
                  </span>
                )}
                {!isExceeded && !isUnlimited && percentage > 80 && (
                  <span className='px-2 py-1 text-xs font-semibold bg-yellow-100 text-yellow-800 rounded'>
                    {remaining.toLocaleString()} left
                  </span>
                )}
              </div>

              {!isUnlimited && (
                <div className='mt-2'>
                  <div className='w-full bg-gray-200 rounded-full h-2'>
                    <div
                      className={`h-2 rounded-full transition-all ${
                        isExceeded ? 'bg-red-600' :
                        percentage > 80 ? 'bg-yellow-500' :
                        'bg-green-600'
                      }`}
                      style={{ width: `${percentage}%` }}
                    />
                  </div>
                  <p className='text-xs text-gray-500 mt-1'>
                    {percentage.toFixed(1)}% used
                  </p>
                </div>
              )}

              {isUnlimited && (
                <div className='mt-2'>
                  <div className='w-full bg-gray-200 rounded-full h-2'>
                    <div className='h-2 rounded-full bg-purple-600' style={{ width: '5%' }} />
                  </div>
                  <p className='text-xs text-gray-500 mt-1'>No limits</p>
                </div>
              )}
            </div>
          );
        })}

        {!summary.length && (
          <div className='border rounded-lg p-8 text-center text-gray-500'>
            <p>No usage data yet. Start using the platform to see your metrics here.</p>
          </div>
        )}
      </div>

      <div className='border rounded-lg p-4 bg-blue-50'>
        <h3 className='font-semibold mb-2'>Need more capacity?</h3>
        <p className='text-sm text-gray-700 mb-3'>
          Upgrade to Pro for higher limits and premium features.
        </p>
        {(profile?.role || 'free') === 'free' && (
          <a href='/pricing' className='inline-block px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700'>
            Upgrade to Pro
          </a>
        )}
        {(profile?.role || 'free') === 'pro' && (
          <p className='text-sm text-gray-600'>
            You're on the Pro plan. Contact support for enterprise options.
          </p>
        )}
      </div>
    </div>
  );
}
