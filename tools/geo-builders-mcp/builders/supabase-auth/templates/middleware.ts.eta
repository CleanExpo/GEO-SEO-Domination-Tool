import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { createServerClient, type CookieOptions } from '@supabase/ssr';

export async function middleware(request: NextRequest) {
  let response = NextResponse.next({ request: { headers: request.headers } });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) { return request.cookies.get(name)?.value; },
        set(name: string, value: string, options: CookieOptions) { request.cookies.set({ name, value, ...options }); response.cookies.set({ name, value, ...options }); },
        remove(name: string, options: CookieOptions) { request.cookies.set({ name, value: '', ...options }); response.cookies.set({ name, value: '', ...options }); }
      }
    }
  );

  const { data: { user } } = await supabase.auth.getUser();

  // Protected routes
  const protectedPaths = ['/dashboard', '/settings', '/projects'];
  const isProtected = protectedPaths.some(p=> request.nextUrl.pathname.startsWith(p));

  if (isProtected && !user) {
    return NextResponse.redirect(new URL('/sign-in', request.url));
  }

  // Auth routes (redirect to dashboard if already signed in)
  const authPaths = ['/sign-in', '/sign-up'];
  const isAuth = authPaths.some(p=> request.nextUrl.pathname.startsWith(p));

  if (isAuth && user) {
    return NextResponse.redirect(new URL('/dashboard', request.url));
  }

  return response;
}

export const config = {
  matcher: ['/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)']
};
