import { NextRequest, NextResponse } from 'next/server';
import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

function createSupabaseClient(){
  const cookieStore = cookies();
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() { return cookieStore.getAll(); },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options));
          } catch {}
        }
      }
    }
  );
}

export async function GET(){
  const client = createSupabaseClient();
  const { data: { user } } = await client.auth.getUser();
  if (!user) return NextResponse.json({ ok:false, error:'auth required' }, { status:401 });

  const { data, error } = await client.from('workspaces')
    .select('id,name,slug,owner_id,created_at,workspace_memberships(role,user_id)')
    .order('created_at', { ascending: false });

  if (error) return NextResponse.json({ ok:false, error: error.message }, { status:500 });

  const active = cookies().get('active_workspace')?.value || null;
  return NextResponse.json({ ok:true, result:{ workspaces: data, active } }, { status:200 });
}

export async function POST(req: NextRequest){
  const body = await req.json().catch(()=>({}));
  const name = String(body?.name || '').trim();
  const slug = String(body?.slug || '').trim() || '<%= (DEFAULT_SLUG || 'main') %>';

  const client = createSupabaseClient();
  const { data: { user } } = await client.auth.getUser();
  if (!user) return NextResponse.json({ ok:false, error:'auth required' }, { status:401 });
  if (!name) return NextResponse.json({ ok:false, error:'name required' }, { status:400 });

  const { data, error } = await client.from('workspaces')
    .insert({ name, slug, owner_id: user.id })
    .select('id')
    .maybeSingle();

  if (error) return NextResponse.json({ ok:false, error: error.message }, { status:500 });

  // Set active cookie to the new workspace
  const wsId = data?.id as string;
  const out = NextResponse.json({ ok:true, result:{ id: wsId } }, { status:200 });
  out.cookies.set({ name: 'active_workspace', value: wsId, path: '/', httpOnly: false, sameSite: 'lax' });
  return out;
}

export async function PUT(req: NextRequest){
  // Switch active workspace by id
  const body = await req.json().catch(()=>({}));
  const id = String(body?.id || '');
  if (!id) return NextResponse.json({ ok:false, error:'id required' }, { status:400 });

  const res = NextResponse.json({ ok:true, result:{ id } }, { status:200 });
  res.cookies.set({ name: 'active_workspace', value: id, path: '/', httpOnly: false, sameSite: 'lax' });
  return res;
}
