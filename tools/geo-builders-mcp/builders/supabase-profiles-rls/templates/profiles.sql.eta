-- Create profiles table in <%= SCHEMA_NAME || 'public' %> schema
CREATE TABLE IF NOT EXISTS <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %> (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email TEXT,
  full_name TEXT,
  avatar_url TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %> ENABLE ROW LEVEL SECURITY;

-- Policy: Users can view their own profile
CREATE POLICY "Users can view own profile"
  ON <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>
  FOR SELECT
  USING (auth.uid() = id);

-- Policy: Users can update their own profile
CREATE POLICY "Users can update own profile"
  ON <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>
  FOR UPDATE
  USING (auth.uid() = id);

-- Policy: Users can insert their own profile
CREATE POLICY "Users can insert own profile"
  ON <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>
  FOR INSERT
  WITH CHECK (auth.uid() = id);

-- Function to handle new user creation
CREATE OR REPLACE FUNCTION <%= SCHEMA_NAME || 'public' %>.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %> (id, email)
  VALUES (NEW.id, NEW.email);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to automatically create profile on user signup
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION <%= SCHEMA_NAME || 'public' %>.handle_new_user();

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION <%= SCHEMA_NAME || 'public' %>.update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-update updated_at
DROP TRIGGER IF EXISTS update_<%= TABLE_NAME || 'profiles' %>_updated_at ON <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>;
CREATE TRIGGER update_<%= TABLE_NAME || 'profiles' %>_updated_at
  BEFORE UPDATE ON <%= SCHEMA_NAME || 'public' %>.<%= TABLE_NAME || 'profiles' %>
  FOR EACH ROW
  EXECUTE FUNCTION <%= SCHEMA_NAME || 'public' %>.update_updated_at();
