import { NextRequest, NextResponse } from 'next/server';
import { headers } from 'next/headers';
import Stripe from 'stripe';
import { setRoleByStripeCustomer } from '@/lib/billing';

export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

export async function POST(req: NextRequest){
  const sig = headers().get('stripe-signature');
  const whSecret = process.env.STRIPE_WEBHOOK_SECRET;
  if (!whSecret || !sig) return NextResponse.json({ ok:false, error:'missing_signature' }, { status:400 });

  const raw = await req.text();
  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string, { apiVersion: '2024-06-20' as any });

  let event: Stripe.Event;
  try { event = stripe.webhooks.constructEvent(raw, sig, whSecret); }
  catch (err:any) { return NextResponse.json({ ok:false, error: `invalid_signature:${err.message}` }, { status:400 }); }

  try{
    switch(event.type){
      case 'checkout.session.completed': {
        const s = event.data.object as Stripe.Checkout.Session;
        const subId = s.subscription as string | null;
        const cust = s.customer as string | null;
        if (cust){
          let currentEnd: number | null = null;
          if (subId){
            const sub = await stripe.subscriptions.retrieve(subId);
            currentEnd = sub.current_period_end ? sub.current_period_end*1000 : null;
          }
          await setRoleByStripeCustomer(cust, 'pro', 'pro', currentEnd);
        }
        break;
      }
      case 'customer.subscription.updated':
      case 'invoice.paid': {
        const obj: any = event.data.object as any;
        const sub = obj.subscription ? await stripe.subscriptions.retrieve(obj.subscription) : obj;
        const cust = (sub.customer || obj.customer) as string | null;
        if (cust) {
          const currentEnd = sub.current_period_end ? sub.current_period_end*1000 : null;
          await setRoleByStripeCustomer(cust, 'pro', 'pro', currentEnd);
        }
        break;
      }
      case 'customer.subscription.deleted': {
        const sub = event.data.object as Stripe.Subscription;
        const cust = sub.customer as string | null;
        if (cust) { await setRoleByStripeCustomer(cust, 'free', 'free', null); }
        break;
      }
      default:
        // no-op
        break;
    }
    return NextResponse.json({ received: true });
  }catch(e:any){ return NextResponse.json({ ok:false, error: e?.message||'handler_error' }, { status:500 }); }
}
