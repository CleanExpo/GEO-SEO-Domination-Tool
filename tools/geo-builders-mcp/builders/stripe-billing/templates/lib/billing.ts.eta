import { createClient } from '@supabase/supabase-js';

type Role = 'free'|'pro'|'admin';

function svc(){
  const url = process.env.SUPABASE_URL as string;
  const key = process.env.SUPABASE_SERVICE_ROLE as string;
  if (!url || !key) throw new Error('Supabase service role envs required');
  return createClient(url, key);
}

export async function ensureStripeCustomerForUser(user: { id: string; email?: string|null }){
  const s = svc();
  const { data: prof } = await s.from('profiles').select('id,stripe_customer_id,email').eq('id', user.id).maybeSingle();
  return prof?.stripe_customer_id || null;
}

export async function setRoleByStripeCustomer(customerId: string, role: Role, plan?: string|null, currentPeriodEnd?: number|null){
  const s = svc();
  const { data: rows } = await s.from('profiles').select('id').eq('stripe_customer_id', customerId).limit(1);
  if (!rows || !rows.length) return false;
  const id = rows[0].id;
  const updates: any = { role };
  if (plan !== undefined) updates.plan = plan;
  if (currentPeriodEnd !== undefined) updates.current_period_end = currentPeriodEnd;
  await s.from('profiles').update(updates).eq('id', id);
  return true;
}

export async function attachCustomerToUser(user: { id: string; email?: string|null }, customerId: string){
  const s = svc();
  await s.from('profiles').update({ stripe_customer_id: customerId }).eq('id', user.id);
}
