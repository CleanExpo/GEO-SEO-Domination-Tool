/**
 * Business Lookup API
 *
 * Auto-populate onboarding form with business data from:
 * - Google Business Profile (GBP) via Google Places API
 * - Website scraping for platform detection
 * - Competitor discovery via Google Maps API
 * - SEO data extraction
 */

import { NextRequest, NextResponse } from 'next/server';

interface BusinessLookupResult {
  found: boolean;

  // Company Details
  businessName?: string;
  phone?: string;
  email?: string;
  address?: string;
  location?: {
    lat: number;
    lng: number;
    formatted: string;
  };
  industry?: string;
  website?: string;

  // Website Details
  websitePlatform?: string;
  techStack?: string[];

  // Google Business Profile Data
  gbp?: {
    placeId: string;
    rating?: number;
    reviewCount?: number;
    categories?: string[];
    photos?: number;
    verified?: boolean;
    hours?: any;
  };

  // Competitors
  competitors?: Array<{
    name: string;
    website?: string;
    distance?: number;
    rating?: number;
  }>;

  // SEO Keywords (from GBP)
  keywords?: string[];
}

export async function POST(request: NextRequest) {
  try {
    const { query, searchBy } = await request.json();

    if (!query || query.trim().length < 3) {
      return NextResponse.json(
        { error: 'Query must be at least 3 characters' },
        { status: 400 }
      );
    }

    const isUrlSearch = searchBy === 'url' || query.startsWith('http');
    console.log(`[Business Lookup] ${isUrlSearch ? 'URL-based' : 'Name-based'} search for: "${query}"`);

    const result: BusinessLookupResult = {
      found: false
    };

    // Step 1: Search Google Places for the business
    // If URL provided, extract domain and search for it
    const searchQuery = isUrlSearch ? extractDomain(query) : query;
    const placeData = await searchGooglePlaces(searchQuery);

    if (placeData) {
      result.found = true;
      result.businessName = placeData.name;
      result.phone = placeData.formatted_phone_number;
      result.address = placeData.formatted_address;
      result.website = placeData.website;
      result.location = {
        lat: placeData.geometry?.location?.lat,
        lng: placeData.geometry?.location?.lng,
        formatted: placeData.formatted_address
      };

      // Extract industry from Google categories
      if (placeData.types && placeData.types.length > 0) {
        result.industry = formatIndustry(placeData.types);
      }

      // GBP details
      result.gbp = {
        placeId: placeData.place_id,
        rating: placeData.rating,
        reviewCount: placeData.user_ratings_total,
        categories: placeData.types,
        photos: placeData.photos?.length || 0,
        verified: placeData.business_status === 'OPERATIONAL',
        hours: placeData.opening_hours
      };

      // Step 2: If website found, detect platform and tech stack
      if (result.website) {
        const techData = await detectWebsiteTechnology(result.website);
        result.websitePlatform = techData.platform;
        result.techStack = techData.technologies;
      }

      // Step 3: Find nearby competitors
      if (placeData.geometry?.location) {
        const competitors = await findNearbyCompetitors(
          placeData.geometry.location,
          placeData.types?.[0] || 'business',
          placeData.place_id
        );
        result.competitors = competitors;
      }

      // Step 4: Extract keywords from GBP categories and business type
      result.keywords = extractKeywordsFromGBP(placeData);
    }

    return NextResponse.json(result);

  } catch (error: any) {
    console.error('[Business Lookup] Error:', error);
    return NextResponse.json(
      {
        error: 'Business lookup failed',
        details: error.message
      },
      { status: 500 }
    );
  }
}

/**
 * Search Google Places API
 */
async function searchGooglePlaces(query: string) {
  const apiKey = process.env.GOOGLE_API_KEY || process.env.NEXT_PUBLIC_GOOGLE_PAGESPEED_API_KEY;

  if (!apiKey) {
    console.error('[Google Places] API key not configured');
    throw new Error('Google API key not configured');
  }

  // Step 1: Find place candidates
  const searchUrl = `https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=${encodeURIComponent(query)}&inputtype=textquery&fields=place_id&key=${apiKey}`;

  console.log('[Google Places] Searching for:', query);
  console.log('[Google Places] API URL:', searchUrl.replace(apiKey, '***'));

  const searchResponse = await fetch(searchUrl);
  const searchData = await searchResponse.json();

  console.log('[Google Places] Response status:', searchData.status);
  console.log('[Google Places] Candidates found:', searchData.candidates?.length || 0);

  if (searchData.status !== 'OK' && searchData.status !== 'ZERO_RESULTS') {
    console.error('[Google Places] API Error:', searchData.status, searchData.error_message);
  }

  if (!searchData.candidates || searchData.candidates.length === 0) {
    console.log('[Google Places] No candidates found for query:', query);
    return null;
  }

  const placeId = searchData.candidates[0].place_id;

  // Step 2: Get detailed place information
  const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,formatted_phone_number,website,geometry,types,rating,user_ratings_total,photos,business_status,opening_hours&key=${apiKey}`;

  const detailsResponse = await fetch(detailsUrl);
  const detailsData = await detailsResponse.json();

  return detailsData.result || null;
}

/**
 * Find nearby competitors
 */
async function findNearbyCompetitors(location: any, businessType: string, excludePlaceId: string) {
  const apiKey = process.env.GOOGLE_API_KEY || process.env.NEXT_PUBLIC_GOOGLE_PAGESPEED_API_KEY;

  const nearbyUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${location.lat},${location.lng}&radius=5000&type=${businessType}&key=${apiKey}`;

  const response = await fetch(nearbyUrl);
  const data = await response.json();

  if (!data.results) return [];

  // Get top 5 competitors (excluding the queried business)
  return data.results
    .filter((place: any) => place.place_id !== excludePlaceId)
    .slice(0, 5)
    .map((place: any) => ({
      name: place.name,
      website: place.website,
      distance: place.vicinity ? calculateDistance(location, place.geometry?.location) : null,
      rating: place.rating
    }));
}

/**
 * Detect website platform and technologies
 */
async function detectWebsiteTechnology(websiteUrl: string) {
  try {
    // Fetch website HTML
    const response = await fetch(websiteUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; SEO-Bot/1.0)'
      }
    });

    const html = await response.text();
    const headers = Object.fromEntries(response.headers.entries());

    const technologies: string[] = [];
    let platform = 'Custom';

    // Detect WordPress
    if (html.includes('wp-content') || html.includes('wordpress')) {
      platform = 'WordPress';
      technologies.push('WordPress');
    }

    // Detect Shopify
    if (html.includes('cdn.shopify.com') || html.includes('Shopify.theme')) {
      platform = 'Shopify';
      technologies.push('Shopify');
    }

    // Detect Wix
    if (html.includes('wix.com') || html.includes('_wix')) {
      platform = 'Wix';
      technologies.push('Wix');
    }

    // Detect Squarespace
    if (html.includes('squarespace')) {
      platform = 'Squarespace';
      technologies.push('Squarespace');
    }

    // Detect React
    if (html.includes('react') || html.includes('__NEXT_DATA__')) {
      technologies.push('React');
      if (html.includes('__NEXT_DATA__')) {
        platform = 'Next.js';
        technologies.push('Next.js');
      }
    }

    // Detect server from headers
    if (headers['server']) {
      technologies.push(headers['server']);
    }

    return {
      platform,
      technologies: [...new Set(technologies)] // Remove duplicates
    };

  } catch (error) {
    console.warn('[Tech Detection] Failed:', error);
    return {
      platform: 'Unknown',
      technologies: []
    };
  }
}

/**
 * Format industry from Google Place types
 */
function formatIndustry(types: string[]): string {
  const industryMap: Record<string, string> = {
    'restaurant': 'Food & Beverage',
    'food': 'Food & Beverage',
    'cafe': 'Food & Beverage',
    'lawyer': 'Legal Services',
    'attorney': 'Legal Services',
    'doctor': 'Healthcare',
    'dentist': 'Healthcare',
    'hospital': 'Healthcare',
    'plumber': 'Home Services',
    'electrician': 'Home Services',
    'contractor': 'Construction',
    'real_estate_agency': 'Real Estate',
    'car_dealer': 'Automotive',
    'car_repair': 'Automotive',
    'store': 'Retail',
    'clothing_store': 'Retail',
    'gym': 'Fitness & Wellness',
    'spa': 'Fitness & Wellness',
    'beauty_salon': 'Beauty & Personal Care',
    'hair_care': 'Beauty & Personal Care',
    'accounting': 'Professional Services',
    'insurance_agency': 'Financial Services',
    'bank': 'Financial Services'
  };

  for (const type of types) {
    if (industryMap[type]) {
      return industryMap[type];
    }
  }

  // Return first type formatted
  return types[0]?.replace(/_/g, ' ')
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ') || 'General Business';
}

/**
 * Extract SEO keywords from GBP data
 */
function extractKeywordsFromGBP(placeData: any): string[] {
  const keywords: string[] = [];

  // Add business name variations
  if (placeData.name) {
    keywords.push(placeData.name.toLowerCase());
  }

  // Add location-based keywords
  if (placeData.formatted_address) {
    const addressParts = placeData.formatted_address.split(',');
    const city = addressParts[addressParts.length - 3]?.trim();
    const state = addressParts[addressParts.length - 2]?.trim();

    if (city) keywords.push(city.toLowerCase());
    if (state) keywords.push(state.toLowerCase());
  }

  // Add category-based keywords
  if (placeData.types) {
    placeData.types.slice(0, 3).forEach((type: string) => {
      keywords.push(type.replace(/_/g, ' '));
    });
  }

  // Combine for common search patterns
  if (placeData.types?.[0] && placeData.formatted_address) {
    const primaryType = placeData.types[0].replace(/_/g, ' ');
    const addressParts = placeData.formatted_address.split(',');
    const city = addressParts[addressParts.length - 3]?.trim();

    if (city) {
      keywords.push(`${primaryType} in ${city.toLowerCase()}`);
      keywords.push(`${city.toLowerCase()} ${primaryType}`);
    }
  }

  return [...new Set(keywords)].slice(0, 10); // Remove duplicates, limit to 10
}

/**
 * Extract domain from URL
 */
function extractDomain(url: string): string {
  try {
    const urlObj = new URL(url.startsWith('http') ? url : `https://${url}`);
    return urlObj.hostname.replace('www.', '');
  } catch {
    return url;
  }
}

/**
 * Calculate distance between two coordinates (in meters)
 */
function calculateDistance(loc1: any, loc2: any): number {
  const R = 6371e3; // Earth radius in meters
  const φ1 = (loc1.lat * Math.PI) / 180;
  const φ2 = (loc2.lat * Math.PI) / 180;
  const Δφ = ((loc2.lat - loc1.lat) * Math.PI) / 180;
  const Δλ = ((loc2.lng - loc1.lng) * Math.PI) / 180;

  const a =
    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
    Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

  return R * c;
}
